{"ast":null,"code":"var _jsxFileName = \"/Users/jongauer/Desktop/tictactoe-redo/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Board from \"./components/Board.jsx\"; // Note: As far as functionality goes, this is all set.\n// Can make styles nicer with CSS.\n// Can refactor components into external files to import.\n// function Square(props) {\n//     const conditionalColor = {\n//       backgroundColor: props.isGameEnder ? \"red\" : \"#fff\"\n//     }\n//     return (\n//       <button className=\"square\"\n//               onClick={props.onClick}\n//               style={conditionalColor}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n// function Board(props) {\n//   function renderSquare(i) {\n//     return <Square value={props.squares[i]}\n//                   onClick={()=>props.onClick(i)}\n//                   key = {i}\n//                   id={`squareNumber${i}`}\n//                   isGameEnder={props.isGameOver.isOver && props.isGameOver.gameEndingSquares.includes(i)\n//                               ? true : false}\n//     />;\n//   }\n//     return (\n//       <div>\n//         {[0, 1, 2].map(row => {\n//           return <div className=\"board-row\" key={row}>\n//             {[0, 1, 2].map((square) => {\n//               return renderSquare(square + row*3)\n//             })}\n//           </div>\n//         })}\n//       </div>\n//     );\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Moves() {\n  const listStyle = {\n    display: \"flex\",\n    flexDirection: gameState.movesAscending ? \"column\" : \"column-reverse\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    style: listStyle,\n    children: history.map((step, moveNumber) => {\n      const description = moveNumber ? `Go to move no. ${moveNumber} (${current.clickedOrder[moveNumber - 1][0]} at ${current.clickedOrder[moveNumber - 1][1]})` : `Go to game start`;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(moveNumber),\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 34\n        }, this)\n      }, moveNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Moves;\n\nfunction Game() {\n  _s();\n\n  const [gameState, setGameState] = useState({\n    history: [{\n      squares: Array(9).fill(null),\n      clickedOrder: []\n    }],\n    stepNumber: 0,\n    xIsNext: true,\n    movesAscending: true\n  });\n  const [isGameOver, setGameOver] = useState({\n    isOver: false,\n    gameEndingSquares: []\n  });\n\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        if (isGameOver.isOver === false) {\n          setGameOver({\n            isOver: true,\n            gameEndingSquares: lines[i]\n          });\n        }\n\n        console.log(isGameOver);\n        return squares[a];\n      }\n    }\n\n    return null;\n  } // This function will be passed into <Board/> and then into each <Square/> as props.\n\n\n  function handleSquareClick(i) {\n    // Setting up deep copy of history from state object\n    // and the array of squares for the current turn\n    const history = gameState.history.slice(0, gameState.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); // Setting up grid coordinates for each square's index value\n    // and specifying which player placed on that square\n\n    function findCoordinate(index) {\n      const coordinate = [];\n\n      switch (index) {\n        case 0:\n          coordinate.push(\"A-1\");\n          break;\n\n        case 1:\n          coordinate.push(\"A-2\");\n          break;\n\n        case 2:\n          coordinate.push(\"A-3\");\n          break;\n\n        case 3:\n          coordinate.push(\"B-1\");\n          break;\n\n        case 4:\n          coordinate.push(\"B-2\");\n          break;\n\n        case 5:\n          coordinate.push(\"B-3\");\n          break;\n\n        case 6:\n          coordinate.push(\"C-1\");\n          break;\n\n        case 7:\n          coordinate.push(\"C-2\");\n          break;\n\n        case 8:\n          coordinate.push(\"C-3\");\n          break;\n\n        default:\n          break;\n      }\n\n      gameState.xIsNext ? coordinate.unshift(\"X\") : coordinate.unshift(\"O\");\n      return coordinate;\n    }\n\n    const coordinate = findCoordinate(i); // if calculateWinner returns null AND squares[i] returns null, the code continues.\n    // Otherwise, the function stops here.\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    } // Placing either an X or O on the clicked square's index in the Squares array in the State\n\n\n    squares[i] = gameState.xIsNext ? \"X\" : \"O\"; // Adding the coordinate of the clicked square to the clickedOrder array\n    // (clickedOrder array will hold coordinates, whereas squares array will hold X/O at indices)\n    // (there's probably a cleaner way to refactor this but I don't feel like it rn)\n\n    const oldClickedOrder = current.clickedOrder.slice();\n    oldClickedOrder.push(coordinate);\n    const newClickedOrder = oldClickedOrder.slice();\n    setGameState({\n      history: history.concat([{\n        squares: squares,\n        clickedOrder: newClickedOrder\n      }]),\n      stepNumber: history.length,\n      xIsNext: !gameState.xIsNext,\n      movesAscending: gameState.movesAscending\n    });\n  }\n\n  const history = gameState.history;\n  const current = history[gameState.stepNumber];\n\n  function jumpTo(step) {\n    setGameState({\n      history: gameState.history.slice(0, step + 1),\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      movesAscending: gameState.movesAscending\n    });\n\n    if (isGameOver.isOver) {\n      setGameOver({\n        isOver: false,\n        gameEndingSquares: []\n      });\n      console.log(isGameOver);\n    }\n  }\n\n  const winner = calculateWinner(current.squares);\n  let status;\n\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else if (current.squares.includes(null)) {\n    status = `Next player: ${gameState.xIsNext ? \"X\" : \"O\"}`;\n  } else {\n    status = \"Draw\";\n  }\n\n  function flipButtons() {\n    setGameState({ ...gameState,\n      movesAscending: !gameState.movesAscending\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        isGameOver: isGameOver,\n        onClick: i => handleSquareClick(i)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Moves, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: flipButtons,\n        children: \"Flip buttons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 7\n  }, this);\n} // ========================================\n\n\n_s(Game, \"JlmXnxM9xJ1Y+YiYw2eJYZyWMt4=\");\n\n_c2 = Game;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 238,\n  columnNumber: 13\n}, this));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Moves\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["React","useState","ReactDOM","Board","Moves","listStyle","display","flexDirection","gameState","movesAscending","history","map","step","moveNumber","description","current","clickedOrder","jumpTo","Game","setGameState","squares","Array","fill","stepNumber","xIsNext","isGameOver","setGameOver","isOver","gameEndingSquares","calculateWinner","lines","i","length","a","b","c","console","log","handleSquareClick","slice","findCoordinate","index","coordinate","push","unshift","oldClickedOrder","newClickedOrder","concat","winner","status","includes","flipButtons","root","createRoot","document","getElementById","render"],"sources":["/Users/jongauer/Desktop/tictactoe-redo/src/index.js"],"sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Board from \"./components/Board.jsx\"\n\n// Note: As far as functionality goes, this is all set.\n// Can make styles nicer with CSS.\n// Can refactor components into external files to import.\n\n// function Square(props) {\n//     const conditionalColor = {\n//       backgroundColor: props.isGameEnder ? \"red\" : \"#fff\"\n//     }\n//     return (\n//       <button className=\"square\"\n//               onClick={props.onClick}\n//               style={conditionalColor}>\n//         {props.value}\n//       </button>\n//     );\n//   }\n\n// function Board(props) {\n//   function renderSquare(i) {\n//     return <Square value={props.squares[i]}\n//                   onClick={()=>props.onClick(i)}\n//                   key = {i}\n//                   id={`squareNumber${i}`}\n//                   isGameEnder={props.isGameOver.isOver && props.isGameOver.gameEndingSquares.includes(i)\n//                               ? true : false}\n//     />;\n//   }\n//     return (\n//       <div>\n//         {[0, 1, 2].map(row => {\n//           return <div className=\"board-row\" key={row}>\n//             {[0, 1, 2].map((square) => {\n//               return renderSquare(square + row*3)\n//             })}\n//           </div>\n//         })}\n       \n//       </div>\n//     );\n// }\n\n\nfunction Moves(){\n  const listStyle = {\n    display: \"flex\",\n    flexDirection: gameState.movesAscending ? \"column\" : \"column-reverse\"\n  }\n  return <ol style={listStyle}>{history.map((step, moveNumber) => {\n    const description = moveNumber ? `Go to move no. ${moveNumber} (${current.clickedOrder[moveNumber - 1][0]} at ${current.clickedOrder[moveNumber - 1][1]})` : `Go to game start`;\n    return (<li key={moveNumber}><button onClick={()=> jumpTo(moveNumber)}>\n    {description} \n    </button></li>)})}</ol>\n}\n\n\nfunction Game() {\n\n    const [gameState, setGameState] = useState({\n      history: [{\n              squares: Array(9).fill(null),\n              clickedOrder: []\n            }],\n      stepNumber: 0,\n      xIsNext: true,\n      movesAscending: true\n    })\n\n    const [isGameOver, setGameOver] = useState({\n      isOver: false,\n      gameEndingSquares: []\n    })\n\n\n    function calculateWinner(squares) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n      ];\n    \n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          if (isGameOver.isOver === false) {\n            setGameOver({\n            isOver: true,\n            gameEndingSquares: lines[i]\n          })\n        } console.log(isGameOver);\n          return squares[a];\n        }\n      }\n      return null;\n    }\n\n    // This function will be passed into <Board/> and then into each <Square/> as props.\n    function handleSquareClick(i) {\n\n      // Setting up deep copy of history from state object\n      // and the array of squares for the current turn\n      const history = gameState.history.slice(0, gameState.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n\n\n      // Setting up grid coordinates for each square's index value\n      // and specifying which player placed on that square\n      function findCoordinate(index) {\n        const coordinate = []\n        switch(index) {\n        case 0:\n          coordinate.push(\"A-1\");\n          break;\n        case 1:\n          coordinate.push(\"A-2\");\n          break;\n        case 2:\n          coordinate.push(\"A-3\");\n          break;\n        case 3:\n          coordinate.push(\"B-1\");\n          break;\n        case 4:\n          coordinate.push(\"B-2\");\n          break;\n        case 5:\n          coordinate.push(\"B-3\");\n          break;\n        case 6:\n          coordinate.push(\"C-1\");\n          break;\n        case 7:\n          coordinate.push(\"C-2\");\n          break;\n        case 8:\n          coordinate.push(\"C-3\");\n          break;\n        default:\n          break;\n      }\n      gameState.xIsNext ? coordinate.unshift(\"X\") : coordinate.unshift(\"O\");\n      return coordinate;\n    }\n      const coordinate = findCoordinate(i);\n\n      // if calculateWinner returns null AND squares[i] returns null, the code continues.\n      // Otherwise, the function stops here.\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      }\n\n      // Placing either an X or O on the clicked square's index in the Squares array in the State\n      squares[i] = gameState.xIsNext ? \"X\" : \"O\";\n\n      // Adding the coordinate of the clicked square to the clickedOrder array\n      // (clickedOrder array will hold coordinates, whereas squares array will hold X/O at indices)\n      // (there's probably a cleaner way to refactor this but I don't feel like it rn)\n      const oldClickedOrder = current.clickedOrder.slice();\n      oldClickedOrder.push(coordinate);\n      const newClickedOrder = oldClickedOrder.slice();\n      \n\n      setGameState({\n        history: history.concat([{\n          squares: squares,\n          clickedOrder: newClickedOrder\n        }]),\n        stepNumber: history.length,\n        xIsNext: !gameState.xIsNext,\n        movesAscending: gameState.movesAscending})\n    }\n\n    const history = gameState.history;\n    const current = history[gameState.stepNumber];\n\n    function jumpTo(step) {\n      setGameState({\n        history: gameState.history.slice(0, step + 1),\n        stepNumber: step,\n        xIsNext: (step % 2) === 0,\n        movesAscending: gameState.movesAscending\n      });\n      if (isGameOver.isOver) {\n        setGameOver({\n          isOver: false,\n          gameEndingSquares: []\n        })\n        console.log(isGameOver)\n      }\n    }\n\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = `Winner: ${winner}`\n    } else if (current.squares.includes(null)){\n      status = `Next player: ${gameState.xIsNext ? \"X\" : \"O\"}`;\n    } else {\n      status = \"Draw\";\n    }\n\n    function flipButtons() {\n      setGameState({\n        ...gameState,\n        movesAscending: !gameState.movesAscending\n      });\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} isGameOver={isGameOver} onClick={(i)=> handleSquareClick(i)}/>\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <Moves/>\n          <button onClick={flipButtons}>Flip buttons</button>\n        </div>\n      </div>\n    );\n  }\n\n\n// ========================================\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Game />);"],"mappings":"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"},"metadata":{},"sourceType":"module"}